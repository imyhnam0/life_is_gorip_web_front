{"ast":null,"code":"let lastRequestTime = 0;\nconst MIN_INTERVAL = 3000; // 최소 3초 간격\n\nconst sendToGemini = async userInput => {\n  const now = Date.now();\n  if (now - lastRequestTime < MIN_INTERVAL) {\n    console.warn(\"요청이 너무 자주 발생합니다. 잠시 기다려 주세요.\");\n    return \"요청이 너무 자주 발생했습니다. 잠시 후 다시 시도해주세요.\";\n  }\n  lastRequestTime = now;\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${API_KEY}`;\n  const body = {\n    contents: [{\n      role: \"user\",\n      parts: [{\n        text: `다음 음식과 그람수의 열량, 탄수화물, 단백질, 지방을 알려줘:\\n${userInput}`\n      }]\n    }]\n  };\n  try {\n    var _json$candidates, _json$candidates$, _json$candidates$$con, _json$candidates$$con2, _json$candidates$$con3;\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    if (response.status === 429) {\n      console.error(\"429 Too Many Requests - 너무 많은 요청\");\n      return \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\";\n    }\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const json = await response.json();\n    return ((_json$candidates = json.candidates) === null || _json$candidates === void 0 ? void 0 : (_json$candidates$ = _json$candidates[0]) === null || _json$candidates$ === void 0 ? void 0 : (_json$candidates$$con = _json$candidates$.content) === null || _json$candidates$$con === void 0 ? void 0 : (_json$candidates$$con2 = _json$candidates$$con.parts) === null || _json$candidates$$con2 === void 0 ? void 0 : (_json$candidates$$con3 = _json$candidates$$con2[0]) === null || _json$candidates$$con3 === void 0 ? void 0 : _json$candidates$$con3.text) || \"응답 없음\";\n  } catch (error) {\n    console.error(\"요청 중 오류 발생:\", error);\n    return \"오류 발생: \" + error.message;\n  }\n};\nexport default sendToGemini;","map":{"version":3,"names":["lastRequestTime","MIN_INTERVAL","sendToGemini","userInput","now","Date","console","warn","url","API_KEY","body","contents","role","parts","text","_json$candidates","_json$candidates$","_json$candidates$$con","_json$candidates$$con2","_json$candidates$$con3","response","fetch","method","headers","JSON","stringify","status","error","ok","Error","json","candidates","content","message"],"sources":["/Users/yunhyungnam/Desktop/foodrecord/front/src/components/SendToGemini.js"],"sourcesContent":["\nlet lastRequestTime = 0;\nconst MIN_INTERVAL = 3000; // 최소 3초 간격\n\nconst sendToGemini = async (userInput) => {\n  const now = Date.now();\n  if (now - lastRequestTime < MIN_INTERVAL) {\n    console.warn(\"요청이 너무 자주 발생합니다. 잠시 기다려 주세요.\");\n    return \"요청이 너무 자주 발생했습니다. 잠시 후 다시 시도해주세요.\";\n  }\n  lastRequestTime = now;\n\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${API_KEY}`;\n\n  const body = {\n    contents: [\n      {\n        role: \"user\",\n        parts: [\n          { text: `다음 음식과 그람수의 열량, 탄수화물, 단백질, 지방을 알려줘:\\n${userInput}` }\n        ]\n      }\n    ]\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body)\n    });\n\n    if (response.status === 429) {\n      console.error(\"429 Too Many Requests - 너무 많은 요청\");\n      return \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\";\n    }\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const json = await response.json();\n    return json.candidates?.[0]?.content?.parts?.[0]?.text || \"응답 없음\";\n\n  } catch (error) {\n    console.error(\"요청 중 오류 발생:\", error);\n    return \"오류 발생: \" + error.message;\n  }\n};\n\nexport default sendToGemini;\n"],"mappings":"AACA,IAAIA,eAAe,GAAG,CAAC;AACvB,MAAMC,YAAY,GAAG,IAAI,CAAC,CAAC;;AAE3B,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EACxC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,IAAIA,GAAG,GAAGJ,eAAe,GAAGC,YAAY,EAAE;IACxCK,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;IAC5C,OAAO,mCAAmC;EAC5C;EACAP,eAAe,GAAGI,GAAG;EAErB,MAAMI,GAAG,GAAG,qGAAqGC,OAAO,EAAE;EAE1H,MAAMC,IAAI,GAAG;IACXC,QAAQ,EAAE,CACR;MACEC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,CACL;QAAEC,IAAI,EAAE,wCAAwCX,SAAS;MAAG,CAAC;IAEjE,CAAC;EAEL,CAAC;EAED,IAAI;IAAA,IAAAY,gBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAE;MAChCc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/Cb,IAAI,EAAEc,IAAI,CAACC,SAAS,CAACf,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAIU,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MAC3BpB,OAAO,CAACqB,KAAK,CAAC,kCAAkC,CAAC;MACjD,OAAO,8BAA8B;IACvC;IAEA,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMI,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAO,EAAAf,gBAAA,GAAAe,IAAI,CAACC,UAAU,cAAAhB,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,wBAAAC,qBAAA,GAApBD,iBAAA,CAAsBgB,OAAO,cAAAf,qBAAA,wBAAAC,sBAAA,GAA7BD,qBAAA,CAA+BJ,KAAK,cAAAK,sBAAA,wBAAAC,sBAAA,GAApCD,sBAAA,CAAuC,CAAC,CAAC,cAAAC,sBAAA,uBAAzCA,sBAAA,CAA2CL,IAAI,KAAI,OAAO;EAEnE,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdrB,OAAO,CAACqB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,OAAO,SAAS,GAAGA,KAAK,CAACM,OAAO;EAClC;AACF,CAAC;AAED,eAAe/B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}